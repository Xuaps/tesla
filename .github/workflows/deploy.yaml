name: 'Terraform'
 
on:
  push:
    branches:
    - main
env:
  AZURE_FUNCTIONAPP_NAME: xuaps-st-functionapp-poduction-we
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions/src'
  PYTHON_VERSION: '3.7'
  APP_PATH: './app'
 
jobs:
  lint:
    name: 'Linter App'
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    # Checkout the repository to the GitHub Actions runner
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.13.2'

    - name: Cache dependencies
      uses: actions/cache@v2
      working-directory: {{env.APP_PATH}} 
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-

    - name: Install dependencies
      working-directory: {{env.APP_PATH}} 
      run: npm ci --ignore-scripts

    - name: Linter
      working-directory: {{env.APP_PATH}} 
      run: npm run lint

  test:
    name: 'Test App'
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    # Checkout the repository to the GitHub Actions runner
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.13.2'

    - name: Cache dependencies
      uses: actions/cache@v2
      working-directory: {{env.APP_PATH}} 
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-

    - name: Install dependencies
      working-directory: {{env.APP_PATH}} 
      run: npm ci --ignore-scripts

    - name: Tests
      working-directory: {{env.APP_PATH}} 
      run: npm run test

  provision:
    name: 'Provision infrastructure'
    needs: [lint, test]
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    # Checkout the repository to the GitHub Actions runner
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    - name: Terraform fmt
      id: fmt
      run: terraform -chdir=terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform -chdir=terraform init

    - name: Terraform Validate
      id: validate
      run: terraform -chdir=terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform -chdir=terraform plan -no-color --var-file=main.tfvars
 
    - name: Terraform apply
      id: apply
      run: terraform -chdir=terraform apply -auto-approve -no-color --var-file=main.tfvars

  deploy:
    name: 'Deploy app'
    needs: provision
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    # Checkout the repository to the GitHub Actions runner
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.13.2'

    - name: Cache dependencies
      uses: actions/cache@v2
      working-directory: {{env.APP_PATH}} 
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-

    - name: Install dependencies
      working-directory: {{env.APP_PATH}} 
      run: npm ci --ignore-scripts

    - name: Build
      working-directory: {{env.APP_PATH}} 
      run: npm run build

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name xuapsstsapoductionwe --auth-mode key -d '$web' -s ./app/dist/.

  deploy-collector:
    name: "Deploy collector"
    runs-on: ubuntu-latest
    needs: [provision]
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v1
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
